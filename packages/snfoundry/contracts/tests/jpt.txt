// import libs
// before deploying in SN, u need to declare it which will give u class hash

use contracts::Counter::Counter::Error::CountCannotBeNegative;
use contracts::Counter::{
    Counter, ICounterDispatcher, ICounterDispatcherTrait, ICounterSafeDispatcher,
    ICounterSafeDispatcherTrait,
};
// contracts came from the contract name, scarb.toml

use openzeppelin_access::ownable::interface::{IOwnableDispatcher, IOwnableDispatcherTrait};
use snforge_std::{
    ContractClassTrait, DeclareResultTrait, EventSpyAssertionsTrait, declare, spy_events,
    start_cheat_caller_address, stop_cheat_caller_address,
};
use starknet::ContractAddress;
// use openzeppelin_utils::serde::SerializedAppend;

const ZERO_COUNT: u32 = 0;

fn OWNER() -> ContractAddress {
    'OWNER'.try_into().unwrap()
}

fn USER_1() -> ContractAddress {
    'USER1'.try_into().unwrap()
}

fn __deploy__(init_value: u32) -> (ICounterDispatcher, IOwnableDispatcher, ICounterSafeDispatcher) {
    // declare contract
    let contract_class = declare("Counter").unwrap().contract_class();
    // let contract_class = declare("Counter").expect('failed to declare!').contract_class();

    // serialize our constructor args, seralizing means conveting the data into felt252
    let mut calldata: Array<felt252> = array![]; // empty array
    // ZERO_COUNT.serialize(ref calldata);
    OWNER().serialize(ref calldata);
    init_value.serialize(ref calldata);

    // deploy contract
    let (contract_address, _) = contract_class.deploy(@calldata).expect('failed deploying');

    // instance of counter, ownable
    let counter = ICounterDispatcher { contract_address: contract_address };
    let ownable = IOwnableDispatcher { contract_address };
    let safe_counter = ICounterSafeDispatcher { contract_address };

    (counter, ownable, safe_counter)
}

#[ignore]
#[test]
fn test_counter_deployment() {
    let (counter, ownable, _) = __deploy__(ZERO_COUNT);

    //count 1
    let count_value = counter.get_count();

    //testing is not complete with assert keyword
    assert(count_value == ZERO_COUNT, 'zero count not set');
    assert(ownable.owner() == OWNER(), 'owner not set');
}

#[ignore]
#[test]
fn test_increase_count() {
    let (counter, _, _) = __deploy__(ZERO_COUNT);

    let count_1 = counter.get_count();

    //checking default zero value
    assert(count_1 == ZERO_COUNT, 'count not set');

    // count is incremented
    counter.increase_count();
    let count_2 = counter.get_count();
    assert(count_2 == count_1 + 1, 'invalid count');
}


#[test]
#[ignore]
fn test_emitted_increased_event() {
    let (counter, _, _) = __deploy__(ZERO_COUNT);
    let mut spy = spy_events(); // spy events? 

    // mock a caller
    start_cheat_caller_address(counter.contract_address, USER_1());
    counter.increase_count();
    stop_cheat_caller_address(counter.contract_address);

    spy
        .assert_emitted(
            @array![
                (
                    counter.contract_address,
                    Counter::Event::Increased(Counter::Increased { account: USER_1() }),
                ),
            ],
        );

    // making sure other events are not emitted
    spy
        .assert_not_emitted(
            @array![
                (
                    counter.contract_address,
                    Counter::Event::Decreased(Counter::Decreased { account: USER_1() }),
                ),
            ],
        );
}

#[ignore]
#[test]
#[feature("safe_dispatcher")] // in case of using safe dispatcher, it is required
fn test_safe_panic_decrease_counter() {
    let (counter, _, safe_counter) = __deploy__(ZERO_COUNT);

    assert(counter.get_count() == ZERO_COUNT, 'invalid count');

    // Result value ma assert lagau nu pare ni match ma nahi lagau ne, no other option
    // match safe_counter.get_count() {
    //     Result::Ok(value) => { println!("Ok: {value}"); },
    //     Result::Err(err) => {
    //         println!("Err: {err:?}");
    //         println!("First error code: {}", *err.at(0));
    //     },
    // }

    match safe_counter.decrease_count() {
        Result::Ok(_) => panic!("cannot decrease 0"),
        Result::Err(e) => assert(
            *e[0] == CountCannotBeNegative, *e.at(0),
        ) //CountCannotBeNegative match garnu paryo error sanga counter ma - decrement huda ko 
    }
}
// Why safe dispater used ?
// - i tried with dispatcher but it panicked and didn't gave the chance to handle revert. But when i
// used safe_dispatcher it gave me the chance to handle revert - In other way, safe dispatcher is
// used so that if decrease_count() fails (becaue count is 0), the test don't crash immediately,
// instead, we check the error manually.

// why use * just to read ?
// - derefrencing *, becuase e is the pointer to the array of felt252. not fully dereferenced array.

// match??
// - match is used to check patterns
// - commanly used for Result, Option

// why safe not in assert but other?
// - can do, right now we getting simple int easy to workwith, if switched to safe_dispatcher, need to use match just to assert or print. Longer so

// Result:ok(_) empty why?
// - it is assumed to fail, no need of any value

// Result::Err(e) kinw * kinw at(0 ) kinw, at this point whole line why
// - this is the line should execute, it's running means everything going ok, we getting
// NegativeDecrement Error - .at() or [] is same
// * without dereferencing won't work. cause pointer will be returned

//above one gives more control compared to this
#[test]
#[should_panic(expected: 'Empty Count')]
fn test_panic_decrease_counter() {
    let (counter, _, _) = __deploy__(ZERO_COUNT);

    assert(counter.get_count() == ZERO_COUNT, 'invalid count');

    counter.decrease_count();
}

#[ignore]
#[test]
fn test_successfull_decrease_counter() { 
    let (counter, _, _) = __deploy__(5);
    assert(counter.get_count() == 5, 'invalid count');

    counter.decrease_count();
    assert(counter.get_count() == 4, 'failed decreament');
}

#[ignore]
#[test]
fn test_successfull_reset_counter() { 
    let (counter, _, _) = __deploy__(5);

    let count_1 = counter.get_count(); 

    assert(count_1 == 5, 'invalid count');

    start_cheat_caller_address(counter.contract_address, OWNER());  // used same OWNER add to set as owner during deployment

    counter.reset_count();

    stop_cheat_caller_address(counter.contract_address); 

    assert(counter.get_count() == 0, 'not reset');
}

#[ignore]
#[test]
#[feature("safe_dispatcher")]
fn test_safe_panic_reset_counter_by_non_owner(){ 
    let (counter, _, safe_counter) = __deploy__(ZERO_COUNT);

    start_cheat_caller_address(counter.contract_address, USER_1()); 

    match safe_counter.reset_count() { 
        Result::Ok(_) => panic!("shoudn't reset"),
        Result::Err(e) => assert(*e[0] == 'Caller is not the owner', *e[0]),
    }

    stop_cheat_caller_address(counter.contract_address); 
}